Step File Generation from Scanned Drawings using Optical Character Recognition and Image Segmentation 

Author: Forrest Desjardins
Date: Dec 30, 2010



Using free tools and software libraries, drawings of mechanical assemblies can be processed to yield data-exchange forms such as STEP-files using a combination of optical character recognition, and segmentation algorithms. 

This can be used to organize and index mass amounts of scanned drawings, that can be parsed and visually represented using graphing software. 



Dependencies:

Note: This is a rough list. There may be additional dependencies for each of the following. Go to the respective website and use an installation guide.



Software

pytesser http://code.google.com/p/pytesser/

tesseract-ocr http://code.google.com/p/tesseract-ocr/

OCRopus http://code.google.com/p/ocropus/wiki/InstallTranscript

iulib
ocropus
ocropy
ocroswig
openfst-1.1
pyopenfst

tessboxes-0.6+ http://www.lbreyer.com/tessboxes.html



Libraries

ImageMagick

Python Imaging Library (PIL)





Definition of scripts:

src/canny_edge_det.py:

performs canny edge detection on an input image.

usage: “python canny_edge_det.py inputimage.png”



src/count_chars.py: 

simply counts the number of characters in a file, excluding spaces.

usage: "python count_chars.py wordlist"



src/dict_stitch.py: (See archive/scripts/training/)

the keystone of the training images generation. Takes a wordlist, and fetches a random character from one of the folders (char_A/A/) for each character of the wordlist. It builds a single image containing these constructed words, for use with training tesseract.

usage: "python dict_stitch.py wordlist"



src/extract_boxes.py:

used to crop and extract blobs from images identified by tesseract-ocr in a box file. 

usage: “python extract_boxes image.png image.box”




src/extractions.py: 

the main interface in the project. contains functions such as get_filedesc_from_image(img), that return strings that can be used in STEP-file generation.

usage: “from extractions import *”



src/jitter.py: (See archive/scripts/training/)

jitters 1 or many input images, and places the jittered output images into the same directory as the input image[s].

usage: "python jitter.py char_A/A_0.png"



src/jitter_all.py: (See archive/scripts/training/)

runs jitter.py over all of the images in current directory

usage: "python jitter_all.py"



src/modify_wordlist.py:

modifies a text file, generated by tesseract for example, such that only characters in [A-Za-z0-9] remain, and outputs to a file.

usage: “python modify_wordlist.py wordlist”



src/page_seg.lua

performs RAST segmentation algorithm on an image that identifies non-text regions, and highlights them yellow. generally, the image output would be run through post_segment.py, which removes the non-text entirely before ocr or further segmentation.

rather than trying to install ocropus lua libraries, make sure you install all dependencies for ocropus. this will allow you to run these scripts using the command 'ocroscript'.

also, the output (before or after post_segment.py) can be further segmented into regions by page_seg_regions.lua

usage: “ocroscript page_seg.lua input_image output_image”


src/page_seg_regions.lua

like page_seg.lua, this script employs RAST segmentation provided by ocropus on an input image. however, unlike page_seg.lua, the image is divided into regions, which are cropped and output individually into a directory. these individual images are generally well suited to being fed directly to tesseract-ocr. because we know roughly what to look for, you can restrict the characters in the output of ocr by using the files in the trunk/config directory, and drastically improve accuracy. 

usage: “ocroscript page_seg_regions.lua 



src/post_segment:

generally used on the output of page_seg.lua, which highlights non-text regions using a default yellow color. this script will replace the yellow pixels with white pixels. tesseract will then not even consider these non-text regions during recognition. can be easily modified to do any type of color replacement operation.

also provides utilities for calculating text to non-text ratios, which can be used to identifie different drawing layouts and other information.

usage: “from post_segment import *”  



src/pyaspell.py: (author: Wojciech Mu³a, license: bsd)

provides a python interface to aspell, a free spell-checker, and multi-platform classes that can be customized in a variety of ways; notably, the word list can easily be set, which can very strongly increase recognition accuracy on whole words. this can be used in combination with the tesseract-ocr word lists and dictionaries, or by itself. 

usage: “from pyaspell import *; import pyaspell”



src/stitch.py:

given an image with a filename of 'one_.png', this script grabs all images in the same directory matching the format ['one_0.png', 'one_1.png',...]

usage: “python stitch.py input_.png”






src/train.py: 

uses BASH commands to either make a box file from a tif image, or train from a box file and tif image

usage: "train.py [inputImg] -makebox" 
       OR 
       "train.py [inputImg]"




src/utils.py: 

contains general use functions flatten(list), gen_directories(prefix='char_'), max_size(input_images)

usage: "from utils import *"



src/words.py:

accepts two filenames and compares the content of the second against the first, returning matching words, and a count of how many matched. 

usage: “python words.py wordlist some_text_file”
